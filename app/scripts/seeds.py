#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–æ–ª–∏ –∏ –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
"""

import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from app.database import SessionLocal
from app.models.user import User
from app.models.role import Role
from app.core.auth import hash_password
from app.crud import role as crud_role
from app.schemas.role import RoleCreate


def seed_data(db: Session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        roles_data = [
            {"name": "admin", "description": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"},
            {
                "name": "user",
                "description": "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏",
            },
            {"name": "manager", "description": "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"},
        ]

        created_roles = {}
        for role_data in roles_data:
            existing_role = crud_role.get_role_by_name(db, role_data["name"])
            if not existing_role:
                role = RoleCreate(**role_data)
                created_role = crud_role.create_role(db, role)
                created_roles[role_data["name"]] = created_role
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å: {created_role.name} (ID: {created_role.id})")
            else:
                created_roles[role_data["name"]] = existing_role
                print(
                    f"‚ÑπÔ∏è  –†–æ–ª—å {existing_role.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_role.id})"
                )

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        admin_role = created_roles.get("admin")
        if not admin_role:
            print("‚ùå –†–æ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return

        existing_admin = db.query(User).filter(User.username == "admin").first()
        if not existing_admin:
            admin_user = User(
                username="admin",
                password_hash=hash_password(
                    "admin123"
                ),  # –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π
                role_id=admin_role.id,
            )
            db.add(admin_user)
            db.commit()
            print(
                f"‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin / admin123 (Role ID: {admin_role.id})"
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
            if existing_admin.role_id != admin_role.id:
                existing_admin.role_id = admin_role.id
                db.commit()
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –Ω–∞ admin (Role ID: {admin_role.id})")
            else:
                print("‚ÑπÔ∏è  –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–æ–ª—å—é")

        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        raise


if __name__ == "__main__":
    db = SessionLocal()
    try:
        seed_data(db)
    finally:
        db.close()
